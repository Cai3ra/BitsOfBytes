// Generated by CoffeeScript 1.8.0
var VideoLoader,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

VideoLoader = (function() {
  function VideoLoader(urls, useDecimalPrecision) {
    var index, url, _i, _len, _ref;
    this.urls = urls != null ? urls : [];
    this.useDecimalPrecision = useDecimalPrecision != null ? useDecimalPrecision : false;
    this.progress = __bind(this.progress, this);
    this.load = __bind(this.load, this);
    this.loaded = 0;
    this.loader = [];
    index = 0;
    _ref = this.urls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      url = _ref[_i];
      this.loader.push({
        id: ++index,
        url: url,
        progress: 0,
        loaded: false
      });
    }
    this.progressCallback = null;
    this.finishCallback = null;
  }

  VideoLoader.prototype.loadEvent = function(evt, item, callback) {
    var myBlob, totalLoaded, vid, video, videoElement, _i, _len, _ref;
    if (evt.target.status === 200) {
      myBlob = evt.target.response;
      vid = (window.URL ? window.URL : webkitURL).createObjectURL(myBlob);
      videoElement = document.createElement("video");
      videoElement.width = 640;
      videoElement.height = 480;
      item.loaded = true;
      totalLoaded = 0;
      _ref = this.loader;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        video = _ref[_i];
        if (video.progress === 1) {
          totalLoaded++;
        }
      }
      videoElement.src = vid;
      document.body.appendChild(videoElement);
      videoElement.play();
      if (this.finishCallback != null) {
        this.finishCallback(item);
      }
      if (totalLoaded === this.loader.length) {
        return callback();
      }
    }
  };

  VideoLoader.prototype.progressEvent = function(evt, item) {
    var percentComplete, percentual, video, _i, _len, _ref;
    if (evt.lengthComputable) {
      percentComplete = evt.loaded / evt.total;
      item.progress = percentComplete;
      percentual = 0;
      _ref = this.loader;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        video = _ref[_i];
        percentual += video.progress;
      }
      if (this.useDecimalPrecision) {
        percentual = (percentual * 100) / this.loader.length;
      } else {
        percentual = Math.ceil((percentual * 100) / this.loader.length);
      }
      if (percentual !== this.loaded) {
        this.loaded = percentual;
        if (this.progressCallback != null) {
          return this.progressCallback(this.loaded);
        }
      }
    }
  };

  VideoLoader.prototype.start = function(callback) {
    var video, xhr, _i, _len, _ref, _results;
    _ref = this.loader;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      video = _ref[_i];
      xhr = new XMLHttpRequest;
      xhr.open('GET', video.url, true);
      xhr.responseType = 'blob';
      xhr.onload = this.load(video, callback);
      xhr.addEventListener("progress", this.progress(video, false));
      _results.push(xhr.send());
    }
    return _results;
  };

  VideoLoader.prototype.load = function(video, callback) {
    return (function(_this) {
      return function(evt) {
        return _this.loadEvent(evt, video, callback);
      };
    })(this);
  };

  VideoLoader.prototype.progress = function(video) {
    return (function(_this) {
      return function(evt) {
        return _this.progressEvent(evt, video);
      };
    })(this);
  };

  VideoLoader.prototype.onProgress = function(callback) {
    return this.progressCallback = callback;
  };

  VideoLoader.prototype.onFinish = function(callback) {
    return this.finishCallback = callback;
  };

  return VideoLoader;

})();
