// Generated by CoffeeScript 1.8.0
'use strict';
var SecurityProtocol, fs, ursa;

ursa = global.resolver.load('rsa dependency', 'ursa');

fs = global.resolver.load('filesystem', 'fs');

SecurityProtocol = (function() {
  function SecurityProtocol(server, socket) {
    this.server = server;
    this.socket = socket;
    this.crt = ursa.createPrivateKey(fs.readFileSync('C:\\desenvolvimento\\certificates\\my-server.key.pem'));
    this.key = ursa.createPublicKey(fs.readFileSync('C:\\desenvolvimento\\certificates\\my-server.pub'));
  }

  SecurityProtocol.prototype.decrypt = function(encryptedData) {
    return this.crt.decrypt(encryptedData, 'base64', 'utf8');
  };

  SecurityProtocol.prototype.encrypt = function(plainTextData) {
    return this.key.encrypt(plainTextData, 'utf8', 'base64');
  };

  SecurityProtocol.prototype.isValidSignature = function(assignedData) {
    return true;
  };

  SecurityProtocol.prototype.assign = function(plainTextData) {
    var assignedData;
    return assignedData = plainTextData;
  };

  SecurityProtocol.prototype.isValid = function(receivedData) {
    var decryptedData, isValid;
    if ((this.server != null) && (this.socket != null) && (receivedData != null)) {
      decryptedData = this.decrypt(receivedData);
      if (decryptedData != null) {
        isValid = isValidSignature(decryptedData);
        if ((isValid != null) && isValid) {
          console.log(isValid);
          return true;
        }
      }
    }
    return false;
  };

  SecurityProtocol.prototype.test = function(text) {
    console.log('Before encrypt:');
    console.log(text.toString());
    text = this.encrypt(text);
    console.log('Now encrypted:');
    console.log(text);
    text = this.decrypt(text);
    console.log('Decrypted:');
    return console.log(text);
  };

  return SecurityProtocol;

})();

module.exports = SecurityProtocol;
